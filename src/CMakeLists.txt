# option
## build shared library
option(CPROJECT_BUILD_CPROJECT_SHARED_LIBS "Build cproject example shared library" ${CPROJECT_BUILD_SHARED_LIBS})
mark_as_advanced(CPROJECT_BUILD_CPROJECT_SHARED_LIBS)
## build static library
option(CPROJECT_BUILD_CPROJECT_STATIC_LIBS "Build cproject example static library" ${CPROJECT_BUILD_STATIC_LIBS})
mark_as_advanced(CPROJECT_BUILD_CPROJECT_STATIC_LIBS)

# name
set(CPROJECT_NAME                     skf)
set(CPROJECT_INCLUDE_DIRECTORY        ${CMAKE_CURRENT_LIST_DIR}/)

# source
cproject_aux_source_directory(${CMAKE_CURRENT_LIST_DIR}    CPROJECT_SOURCE_FILES)

# suffix
set(CPROJECT_USE_SUFFIX OFF)
if (${CPROJECT_BUILD_CPROJECT_SHARED_LIBS} AND ${CPROJECT_BUILD_CPROJECT_STATIC_LIBS})
  set(CPROJECT_USE_SUFFIX ON)
endif()

# shared library
if (CPROJECT_BUILD_CPROJECT_SHARED_LIBS)
  # name
  set(CPROJECT_SHARED_LIBRARY ${CPROJECT_NAME})
  # reanme
  if (CPROJECT_USE_SUFFIX)
    set(CPROJECT_SHARED_LIBRARY ${CPROJECT_SHARED_LIBRARY}_shared)
  endif()
  # work dir
  set(CPROJECT_SHARED_OUTPUT_DIRECTORY  ${CMAKE_BINARY_DIR}/${CPROJECT_SHARED_LIBRARY}.dir/)
  # library
  add_library(${CPROJECT_SHARED_LIBRARY} SHARED ${CPROJECT_SOURCE_FILES})
  # define
  target_compile_definitions(${CPROJECT_SHARED_LIBRARY} PUBLIC -DCPROJECT_API=${CPROJECT_EXTERN_SYMBOL})
  # include
  target_include_directories(${CPROJECT_SHARED_LIBRARY} PUBLIC ${CPROJECT_INCLUDE_DIRECTORY})
  # link library
  if (CPROJECT_DEPS_LIBS)
      target_link_libraries(${CPROJECT_SHARED_LIBRARY} ${CPROJECT_DEPS_LIBS})
  endif()
  # add depends
  if (CPROJECT_DEPS_TARGETS)
      add_dependencies(${CPROJECT_SHARED_LIBRARY} ${CPROJECT_DEPS_TARGETS})
  endif()
  # set target
  set_target_properties(${CPROJECT_SHARED_LIBRARY} PROPERTIES
      ARCHIVE_OUTPUT_DIRECTORY "${CPROJECT_SHARED_OUTPUT_DIRECTORY}"
      LIBRARY_OUTPUT_DIRECTORY "${CPROJECT_SHARED_OUTPUT_DIRECTORY}"
      RUNTIME_OUTPUT_DIRECTORY "${CPROJECT_SHARED_OUTPUT_DIRECTORY}"
      OUTPUT_NAME ${CPROJECT_NAME}
      CLEAN_DIRECT_OUTPUT 1
  )
  if (MSVC)
    set(CPROJECT_SHARED_LIBRARY_FILE ${CPROJECT_SHARED_OUTPUT_DIRECTORY}/${CMAKE_BUILD_TYPE}/${CPROJECT_NAME}.dll)
    mark_as_advanced(CPROJECT_SHARED_LIBRARY_FILE)
  endif()
  # install
  install(TARGETS ${CPROJECT_SHARED_LIBRARY} DESTINATION lib)
endif()

# static library
if (CPROJECT_BUILD_CPROJECT_STATIC_LIBS)
  # name
  set(CPROJECT_STATIC_LIBRARY ${CPROJECT_NAME})
  # reanme
  if (CPROJECT_USE_SUFFIX)
    set(CPROJECT_STATIC_LIBRARY ${CPROJECT_STATIC_LIBRARY}_static)
  endif()
  # work dir
  set(CPROJECT_STATIC_OUTPUT_DIRECTORY  ${CMAKE_BINARY_DIR}/${CPROJECT_STATIC_LIBRARY}.dir/)
  # library
  add_library(${CPROJECT_STATIC_LIBRARY} STATIC ${CPROJECT_SOURCE_FILES})
  # define
  target_compile_definitions(${CPROJECT_STATIC_LIBRARY} PUBLIC -DCPROJECT_API=${CPROJECT_EXTERN_SYMBOL})
  # include
  target_include_directories(${CPROJECT_STATIC_LIBRARY} PUBLIC ${CPROJECT_INCLUDE_DIRECTORY})
  # link library
  if (CPROJECT_DEPS_LIBS)
      target_link_libraries(${CPROJECT_STATIC_LIBRARY} ${CPROJECT_DEPS_LIBS})
  endif()
  # add depends
  if (CPROJECT_DEPS_TARGETS)
      add_dependencies(${CPROJECT_STATIC_LIBRARY} ${CPROJECT_DEPS_TARGETS})
  endif()
  # set target
  set_target_properties(${CPROJECT_STATIC_LIBRARY} PROPERTIES
      ARCHIVE_OUTPUT_DIRECTORY "${CPROJECT_STATIC_OUTPUT_DIRECTORY}"
      LIBRARY_OUTPUT_DIRECTORY "${CPROJECT_STATIC_OUTPUT_DIRECTORY}"
      RUNTIME_OUTPUT_DIRECTORY "${CPROJECT_STATIC_OUTPUT_DIRECTORY}"
      OUTPUT_NAME   ${CPROJECT_STATIC_LIBRARY}
      CLEAN_DIRECT_OUTPUT 1
  )
  # install
  install(TARGETS ${CPROJECT_STATIC_LIBRARY} DESTINATION lib)
endif()
